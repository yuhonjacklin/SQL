/* Short-answer Questions
1. In SQL Server, assuming you can find the result by using both joins and subqueries, which one would you prefer to use and why?
Ans: While JOIN is usually faster than SUBQUERIES, SUBQUERR syntax is generally more readable for SQL beginners.

2. What is CTE and when to use it?
Ans: Common Table Expressions (CTE) can be used to create a recursive query and is a substitute for a view when
the general use of a view is not required. Using a CTE improves readability and enables easy maintenance of complex queries.

3. What are Table Variables? What is their scope and where are they created in SQL Server?
Ans: A table variable is a data type that can be used within a Transact-SQL batch, stored procedure, or function.
It is created and defined similarly to a table, only with a strictly defined lifetime scope.

4. What is the difference between DELETE and TRUNCATE? Which one will have better performance and why?
Ans: (a) TRUNCATE reseeds identity values, whereas DELETE does not; 
(b) TRUNCATE removes all records and does not fire triggers;
(c) TRUNCATE is faster compared to DELETE; and
(d) TRUNCATE is not possible when a table is referenced by an FK or tables are used in replication or with indexed views.

5. What is Identity column? How does DELETE and TRUNCATE affect it?
Ans: An identity column is a column in a database table that is made up of values generated by the database.
If the table contains an identity column, the counter for that column is reset to the seed value defined for the column.
If no seed was defined, the default value 1 is used. To retain the identity counter, use DELETE instead of TRUNCATE.

6. What is difference between “delete from table_name” and “truncate table table_name”?
Ans: (a) We can rollback after DELETE but not after TRUNCATE.
(b) TRUNCATE resets identity of the table, where DELETE does not.
*/

/* Northwind questions */

--Question 1--
/*
List all cities that have both Employees and Customers.
*/
select distinct c.city,
count(c.customerid) as NumOfCustomers,
count(e.employeeid) as NumOfEmployees
from customers c
inner join employees e on c.city = e.city
group by c.city

--Question 2a--
/*
List all cities that have Customers but no Employee (use sub-query).
*/
select distinct c.city from customers c
where c.city NOT IN
(select e.city from employees e)

--Question 2b--
/*
List all cities that have Customers but no Employee (do not user sub-query).
*/
select distinct c.city from customers c
except
select distinct e.city from employees e

--Question 3--
/*
List all products and their total order quantities throughout all orders.
*/
select p.productid, p.productname, sum(od.quantity) as TotalOrderQuantity from products p
inner join [order details] od on p.productid = od.productid
group by p.productid, p.productname

--Question 4--
/*
List all Customer Cities and total products ordered by that city.
*/
select c.city, sum(od.quantity) AS TotalProducts from customers c
inner join orders o ON c.customerid = o.customerid
inner join [order details] od ON o.orderid = od.orderid
group by c.city

--Question 5a--
/*
List all Customer Cities that have at least two customers (user union)
*/
select c.city, count(c.customerid) as NumOfCustomers from customers c
group by c.city
having count(c.customerid) > 1

--Question 5b--
/*
List all Customer Cities that have at least two customers (user sub-query and no union).
*/
select c.city, count(c.customerid) as NumOfCustomers from customers c
group by c.city
except
select c.city, count(c.customerid) as NumOfCustomers from customers c
group by c.city
having count(c.customerid) < 2

--Question 6--
/*
List all Customer Cities that have ordered at least two different kinds of products.
*/
select c.city, count(od.productid) AS TheCount from customers c
inner join orders o ON c.customerid = o.customerid
inner join [order details] od ON o.orderid = od.orderid
group by c.city
having count(od.productid) > 1

--Question 7--
/*
List all Customers who have ordered products, but have the ‘ship city’ on the order different from their own customer cities.
*/
select distinct c.customerid, c.city, o.shipcity from customers c
inner join orders o ON c.customerid = o.customerid
where c.city != o.shipcity

--Question 8--
/*
List 5 most popular products, their average price, and the customer city that ordered most quantity of it.
*/
select top 5 p.productid, sum(od.unitprice - od.discount)/count(od.orderid) AS AvgPrice,
c.city from products p
inner join [order details] od ON p.productid = od.productid
inner join orders o ON od.orderid = o.orderid
inner join customers c ON o.customerid = c.customerid
group by p.productid, c.city

--Question 9a--
/*
List all cities that have never ordered something but we have employees there (use sub-query).
*/
select distinct e.city from employees e
where e.city NOT IN
(select c.city from customers c
inner join orders o ON c.customerid = o.customerid)

--Question 9b--
/*
List all cities that have never ordered something but we have employees there (do not use sub-query)
*/
select distinct e.city from employees e
except
select c.city from customers c

--Question 10--
/*
List one city, if exists, that is the city from where the employee sold most orders (not the product quantity) is, and also the city of most total quantity of products ordered from. 
*/
select top 1 c1.city, count(od.orderid) from customers c1
inner join orders o ON c1.customerid = o.customerid
inner join [order details] od ON o.orderid = od.orderid
group by c1.city
intersect
select top 1 c2.city, sum(od.quantity) from customers c2
inner join orders o ON c2.customerid = o.customerid
inner join [order details] od ON o.orderid = od.orderid
group by c2.city

--Question 11--
/*
How do you remove the duplicates record of a table?

WITH cte AS (
select *, ROW_NUMBER() OVER (
PARITION BY * ORDER BY *
) row_num FROM table_name)
DELETE FROM cte WHERE row_num > 1
*/

/* Question 12
Sample table to be used for solutions below- Employee ( empid integer, mgrid integer, deptid integer, salary integer) Dept (deptid integer, deptname text)
Find employees who do not manage anybody.

select empid from Employee
where empid NOT IN (select mgrid from Employee)
*/

/* Question 13
Find departments that have maximum number of employees. (solution should consider scenario having more than 1 departments that have maximum number of employees). Result should only have - deptname, count of employees sorted by deptname.

select d.deptname, count(e.empid) As HeadCount from Dept d
group by e.deptid
inner join
(select count(empid), rank() over (partition by e.deptid order by e.deptid desc) as Rank
from Employee
group by e.deptid
) temp ON d.deptid = temp.deptid
having temp.Rank = 1
*/

/* Question 14
Find top 3 employees (salary based) in every department. Result should have deptname, empid, salary sorted by deptname and then employee with high to low salary.

select d.deptname, e.empid, e.salary,
RANK() OVER (PARTITION by d.deptname ORDER BY e.salary) AS Rank from Dept d
inner join Employee e ON
where Rank <= 3
order by d.deptname, e.salary desc
*/